---
import { getCollection } from "astro:content";
import FormattedDate from "./FormattedDate.astro";

// Get all pinned blog posts
const pinnedPosts = await getCollection("blog", ({ data }) => {
	return data.pinned === true;
});

// Sort by publication date (newest first)
pinnedPosts.sort(
	(a, b) =>
		new Date(b.data.pubDate || 0).valueOf() -
		new Date(a.data.pubDate || 0).valueOf(),
);
---

<section class="mb-12">
	<h2 class="text-3xl font-bold mb-6 text-center">Posts Destacados</h2>

	{
		pinnedPosts.length > 0 ? (
			<div class="relative">
				<div class="carousel-container overflow-hidden">
					<div
						class="carousel-track flex transition-transform duration-300 ease-in-out"
						id="carousel-track"
					>
						{pinnedPosts.map((post, index) => (
							<div class="carousel-slide flex-shrink-0 w-full md:w-1/2 lg:w-1/3 px-4">
								<article class="bg-white rounded-lg shadow-lg overflow-hidden h-full border border-gray-200 hover:shadow-xl transition-shadow duration-300">
									{post.data.heroImage && (
										<div class="aspect-video overflow-hidden">
											<img
												src={post.data.heroImage.src}
												alt={post.data.title}
												class="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
											/>
										</div>
									)}
									<div class="p-6">
										<div class="flex items-center justify-between mb-3">
											{post.data.pubDate && (
												<FormattedDate
													date={post.data.pubDate}
												/>
											)}
										</div>
										<h3 class="text-xl font-bold mb-3 text-gray-900 hover:text-blue-600 transition-colors">
											<a
												href={`/blog/${post.id}/`}
												class="no-underline"
											>
												{post.data.title}
											</a>
										</h3>
										<p class="text-gray-600 text-base leading-relaxed mb-4">
											{post.data.description}
										</p>
										<a
											href={`/blog/${post.id}/`}
											class="inline-flex items-center text-blue-600 hover:text-blue-800 font-medium transition-colors"
										>
											Leer más
											<svg
												class="w-4 h-4 ml-1"
												fill="none"
												stroke="currentColor"
												viewBox="0 0 24 24"
											>
												<path
													stroke-linecap="round"
													stroke-linejoin="round"
													stroke-width="2"
													d="M9 5l7 7-7 7"
												/>
											</svg>
										</a>
									</div>
								</article>
							</div>
						))}
					</div>
				</div>

				{pinnedPosts.length > 3 && (
					<div class="flex justify-center mt-6 space-x-2">
						<button
							id="prev-btn"
							class="bg-gray-200 hover:bg-gray-300 text-gray-700 font-bold py-2 px-4 rounded-full transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
							aria-label="Anterior"
						>
							<svg
								class="w-5 h-5"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M15 19l-7-7 7-7"
								/>
							</svg>
						</button>
						<button
							id="next-btn"
							class="bg-gray-200 hover:bg-gray-300 text-gray-700 font-bold py-2 px-4 rounded-full transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
							aria-label="Siguiente"
						>
							<svg
								class="w-5 h-5"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M9 5l7 7-7 7"
								/>
							</svg>
						</button>
					</div>
				)}

				{pinnedPosts.length > 3 && (
					<div
						class="flex justify-center mt-4 space-x-2"
						id="dots-container"
					>
						{Array.from({
							length: Math.ceil(pinnedPosts.length / 3),
						}).map((_, index) => (
							<button
								class="dot w-3 h-3 rounded-full bg-gray-300 hover:bg-gray-400 transition-colors"
								data-slide={index}
								aria-label={`Ir a página ${index + 1}`}
							/>
						))}
					</div>
				)}
			</div>
		) : (
			<div class="text-center text-gray-500 py-12">
				<p class="text-lg">No hay posts destacados disponibles.</p>
			</div>
		)
	}
</section>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		const track = document.getElementById("carousel-track");
		const prevBtn = document.getElementById("prev-btn");
		const nextBtn = document.getElementById("next-btn");
		const dotsContainer = document.getElementById("dots-container");

		if (!track) return;

		const slides = track.querySelectorAll(".carousel-slide");
		const totalSlides = slides.length;

		// Determine slides per view based on screen size
		const getSlidesPerView = () => {
			if (window.innerWidth >= 1024) return 3; // lg
			if (window.innerWidth >= 768) return 2; // md
			return 1; // sm
		};

		let currentSlide = 0;
		let slidesPerView = getSlidesPerView();
		let maxSlide = Math.max(0, totalSlides - slidesPerView);

		const updateCarousel = () => {
			const translateX = -(currentSlide * (100 / slidesPerView));
			track.style.transform = `translateX(${translateX}%)`;

			// Update navigation buttons
			if (prevBtn)
				(prevBtn as HTMLButtonElement).disabled = currentSlide === 0;
			if (nextBtn)
				(nextBtn as HTMLButtonElement).disabled =
					currentSlide >= maxSlide;

			// Update dots
			if (dotsContainer) {
				const dots = dotsContainer.querySelectorAll(".dot");
				dots.forEach((dot, index) => {
					const slideIndex = Math.floor(currentSlide / slidesPerView);
					dot.classList.toggle("bg-blue-600", index === slideIndex);
					dot.classList.toggle("bg-gray-300", index !== slideIndex);
				});
			}
		};

		const goToSlide = (slideIndex: number) => {
			currentSlide = Math.max(0, Math.min(slideIndex, maxSlide));
			updateCarousel();
		};

		// Navigation buttons
		if (prevBtn) {
			prevBtn.addEventListener("click", () => {
				goToSlide(currentSlide - 1);
			});
		}

		if (nextBtn) {
			nextBtn.addEventListener("click", () => {
				goToSlide(currentSlide + 1);
			});
		}

		// Dots navigation
		if (dotsContainer) {
			dotsContainer.addEventListener("click", (e) => {
				const dot = (e.target as HTMLElement)?.closest(
					".dot",
				) as HTMLElement;
				if (dot) {
					const slideIndex =
						parseInt((dot as HTMLElement).dataset.slide || "0") *
						slidesPerView;
					goToSlide(slideIndex);
				}
			});
		}

		// Handle window resize
		window.addEventListener("resize", () => {
			const newSlidesPerView = getSlidesPerView();
			if (newSlidesPerView !== slidesPerView) {
				slidesPerView = newSlidesPerView;
				maxSlide = Math.max(0, totalSlides - slidesPerView);
				currentSlide = Math.min(currentSlide, maxSlide);
				updateCarousel();
			}
		});

		// Auto-play functionality (optional)
		let autoPlayInterval: ReturnType<typeof setInterval> | undefined;
		const startAutoPlay = () => {
			autoPlayInterval = setInterval(() => {
				if (currentSlide >= maxSlide) {
					goToSlide(0);
				} else {
					goToSlide(currentSlide + 1);
				}
			}, 5000);
		};

		const stopAutoPlay = () => {
			if (autoPlayInterval) clearInterval(autoPlayInterval);
		};

		// Start auto-play and pause on hover
		if (totalSlides > slidesPerView) {
			startAutoPlay();
			track.addEventListener("mouseenter", stopAutoPlay);
			track.addEventListener("mouseleave", startAutoPlay);
		}

		// Initialize
		updateCarousel();

		// Keyboard navigation
		document.addEventListener("keydown", (e) => {
			if (e.key === "ArrowLeft") {
				e.preventDefault();
				goToSlide(currentSlide - 1);
			} else if (e.key === "ArrowRight") {
				e.preventDefault();
				goToSlide(currentSlide + 1);
			}
		});

		// Touch/swipe support
		let startX = 0;
		let isDragging = false;

		track.addEventListener("touchstart", (e) => {
			startX = e.touches[0].clientX;
			isDragging = true;
		});

		track.addEventListener("touchmove", (e) => {
			if (!isDragging) return;
			e.preventDefault();
		});

		track.addEventListener("touchend", (e) => {
			if (!isDragging) return;
			isDragging = false;

			const endX = e.changedTouches[0].clientX;
			const diff = startX - endX;

			if (Math.abs(diff) > 50) {
				if (diff > 0) {
					goToSlide(currentSlide + 1);
				} else {
					goToSlide(currentSlide - 1);
				}
			}
		});
	});
</script>

<style>
	.carousel-container {
		position: relative;
	}

	.carousel-track {
		display: flex;
		transition: transform 0.3s ease-in-out;
	}

	.carousel-slide {
		flex: 0 0 100%;
	}

	@media (min-width: 768px) {
		.carousel-slide {
			flex: 0 0 50%;
		}
	}

	@media (min-width: 1024px) {
		.carousel-slide {
			flex: 0 0 33.333333%;
		}
	}

	.dot {
		cursor: pointer;
		transition: background-color 0.3s ease;
	}

	.dot:hover {
		background-color: #9ca3af;
	}

	.dot.active {
		background-color: #2563eb;
	}
</style>
